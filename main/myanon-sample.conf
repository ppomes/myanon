#
# Myanon sample config file
#

# Hmac secret (up to 64 chars)
secret = 'mysecret'

# Reports some stats. Stats will be reported as 
# comments at the end of the dump
# Value: yes or no.
stats  = 'yes'

# For python support, script path for custom anonymization functions
# May be relative of absolute
# Note that environment variable PYTHONPATH may also be used
pypath = './tests'

# Name of the python file (without .py)
# This script contains all custom anonymization functions.
# Each function must have a single parameter (the value to anonymize)
pyscript = 'myscript'

# List of tables/fields to anonymize, and/or tables to truncate
# tables and fields are back-quoted.
#
# Table names can by specified as regex with 'regexp' prefix
#
# For each field to anonymize, choose one of the following rule:
# inthash N:
#   creates a hash for integer value, N digits long, up to 32 digits.
# texthash N:
#   creates a hash for text value, N chars long, up to 32 chars.
# fixed 'myvalue':
#   creates a field with value myvalue. The result may be quoted of not,
#   depending on the field type. For example:
#     fixed '5' inserts '5' as value for text fields
#     fixed '5' inserts 5 as value for int fields
#   However, if needed, quoting can be manually controlled by adding
#   'quoted' or 'unquoted' keyword before value.
#   This may be usefull for blob fields:
#     fixed unquoted '0x1234'
# fixed null:
#   inserts NULL as value
# emailhash 'domain.com' N:
#   creates a hash for email, ending with 'domain.com',
#   N chars long (including domain), up to 32 chars
# appendkey 'myvalue' / prependkey 'myvalue'
#   creates a field with with value myvalue, on which a key
#   id appended or prepended. The key field must be taggued with
#   the 'key' keyword
# appendindex 'myvalue' / prependindex 'myvalue'
#   creates a field with with value myvalue, on which an index
#   (row position, starting from 1) is appended or prepended.
# pydef 'function':
#   call the the def 'function' contained in the python script.
#
# In case of multiple values separated by a single char, an optional
# "seperated by " keyword, followed by this char, can be used.
#
# For json fields, multiples rules can be used. Each rule contains
# a path (ex: 'email', 'address.street', 'addresslines[]', depending
# on objet type), and a rule as described before.
#
# Table truncation is done using keyword 'truncate'
# (removal of all insert/updates statements)
#
tables = {
   `people` = {
     `id`         = key
     `lastname`   = texthash 10
     `firstname`  = texthash 10
     `age`        = inthash 2
     `email`      = emailhash 'example.com' 10
     `division`   = fixed 'mycompany'
     `login`      = appendkey 'user'
     `givenmame`  = pydef 'mydef'
   }
   `contacts` = {
     `email` = emailhash 'gmail.com' 15 separated by ','
     `owner` = json {
                     path 'email'     = emailhash 'gmail.com' 10
                     path 'last_name' = texthash 5
                     path 'first_name'= texthash 5
                    }
     `changes` = json { path 'email_changes[]' =  emailhash 'gmail.com' 10 }
   }
   regex `(prod|test)players` = {
     `lastname`  = texthash 20
     `firstname` = texthash 20
   }
   `history` = truncate
}
